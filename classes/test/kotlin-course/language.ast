AstFile(body=AstBlock(statements=[AstFunctionDefinition(name=foo, parameterNames=[arg1, arg2], body=AstBlock(statements=[AstFunctionDefinition(name=bar, parameterNames=[arg], body=AstBlock(statements=[AstVariableDefinition(name=local, initializingExpression=AstBinaryExpression(operationType=PLUS, leftOperand=AstVariableAccess(identifier=arg1), rightOperand=AstBinaryExpression(operationType=MULT, leftOperand=AstVariableAccess(identifier=arg2), rightOperand=AstVariableAccess(identifier=arg))))])), AstIf(condition=AstBinaryExpression(operationType=EQ, leftOperand=AstVariableAccess(identifier=arg1), rightOperand=AstBinaryExpression(operationType=PLUS, leftOperand=AstVariableAccess(identifier=arg2), rightOperand=AstLiteral(value=5))), thenBody=AstBlock(statements=[AstReturn(expression=AstLiteral(value=0))]), elseBody=AstBlock(statements=[AstWhile(condition=AstBinaryExpression(operationType=NEQ, leftOperand=AstVariableAccess(identifier=arg1), rightOperand=AstVariableAccess(identifier=arg2)), body=AstBlock(statements=[AstAssignment(identifier=arg1, expression=AstFunctionCall(identifier=bar, argumentExpressions=[AstBinaryExpression(operationType=MULT, leftOperand=AstVariableAccess(identifier=arg1), rightOperand=AstLiteral(value=2))]))]))]))]))]))